{"version":3,"file":"index.js","mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACzsources":["../webpack://msp430-assembler/./src/MSP430Assembler.js","../webpack://msp430-assembler/./src/utils/RegexUtils.js","../webpack://msp430-assembler/webpack/bootstrap","../webpack://msp430-assembler/webpack/runtime/compat","../webpack://msp430-assembler/webpack/before-startup","../webpack://msp430-assembler/webpack/startup","../webpack://msp430-assembler/webpack/after-startup"],"sourcesContent":["const RegexUtils = require(\"./utils/RegexUtils\");\n\nclass MSP430Assembler {\n\n    parseToLines(str) {\n\n        return str\n            .split(\"\\n\")\n            .map(e => e.trim())\n            .map((el, i) => [i, el])\n            .map(e => [e[0], e[1].replace(/;(.*)/g, \"\")])\n            .map(e => [e[0], e[1].trim()])\n            .filter(el => el[1].length !== 0);\n    }\n\n    isValid(str) {\n\n        if (\n            RegexUtils.isLabel(str) ||\n            RegexUtils.isAdd(str) ||\n            RegexUtils.isSub(str) ||\n            RegexUtils.isCmp(str) ||\n            RegexUtils.isMov(str) ||\n            RegexUtils.isJn(str) ||\n            RegexUtils.isJz(str) ||\n            RegexUtils.isJmp(str)) {\n            return true;\n        }\n\n        return false;\n    }\n\n    syntaxAnalysis(line) {\n\n        if (!this.isValid(line[1])) {\n            throw new Error(`There is a error on line ${line[0]} ${line[1]}`);\n        }\n    }\n\n    compile(str) {\n\n        if (!str) {\n            throw new Error(\"String should not be undefined\");\n        }\n\n        str = str.trim();\n\n        let lines = this.parseToLines(str);\n\n        if (lines.length === 0) {\n            throw new Error(\"String should not be empty\");\n        }\n\n        let errors = [];\n\n        for (const line of lines) {\n            try {\n                this.syntaxAnalysis(line);\n            } catch (error) {\n                errors.push({\n                    \"type\": \"syntax\",\n                    \"lineNumber\": line[0],\n                    \"message\": error.message\n                });\n            }\n        }\n\n        return {\n            errors: errors\n        };\n    }\n}\n\nmodule.exports = MSP430Assembler;\n","class RegexUtils {\n\n    static ID = \"[a-zA-Z]+\\\\w*\";\n\n    static HEX = \"0[xX][0-9a-fA-F]+\";\n\n    static INT = \"[-+]?\\\\d+\";\n\n    static BIN = \"0[bB][01]+\";\n\n    static REGISTER = \"\\\\R[0-9]+\";\n\n    static LABEL = \"@ID@:\";\n\n    static ADDRESS = \"\\\\[@HEX@\\\\]\";\n\n    static IMMEDIATE = \"\\\\#((@HEX@)|(@BIN@)|(@INT@))\";\n\n    static ADD = \"(@ID@:)?\\\\s*ADD\\\\s+((@REGISTER@)|(@IMMEDIATE@))\\\\s*\\\\,\\\\s*(@REGISTER@)\";\n\n    static SUB = \"(@ID@:)?\\\\s*SUB\\\\s+((@REGISTER@)|(@IMMEDIATE@))\\\\s*\\\\,\\\\s*(@REGISTER@)\";\n\n    static CMP = \"(@ID@:)?\\\\s*CMP\\\\s+((@REGISTER@)|(@IMMEDIATE@))\\\\s*\\\\,\\\\s*(@REGISTER@)\";\n\n    static MOV = \"(@ID@:)?\\\\s*MOV\\\\s+((@REGISTER@)|(@IMMEDIATE@)|(@ADDRESS@))\\\\s*\\\\,\\\\s*((@REGISTER@)|(@ADDRESS@))\";\n\n    static JMP = \"(@ID@:)?\\\\s*JMP\\\\s+((@ID@)|(@ADDRESS@))\";\n\n    static JN = \"(@ID@:)?\\\\s*JN\\\\s+((@ID@)|(@ADDRESS@))\";\n\n    static JZ = \"(@ID@:)?\\\\s*JZ\\\\s+((@ID@)|(@ADDRESS@))\";\n\n    static test(pattern, str) {\n\n        // We need to fist replace the compounded\n\n        pattern = pattern.replaceAll(\"@LABEL@\", RegexUtils.LABEL);\n        pattern = pattern.replaceAll(\"@ADDRESS@\", RegexUtils.ADDRESS);\n        pattern = pattern.replaceAll(\"@IMMEDIATE@\", RegexUtils.IMMEDIATE);\n\n        pattern = pattern.replaceAll(\"@ID@\", RegexUtils.ID);\n        pattern = pattern.replaceAll(\"@HEX@\", RegexUtils.HEX);\n        pattern = pattern.replaceAll(\"@BIN@\", RegexUtils.BIN);\n        pattern = pattern.replaceAll(\"@INT@\", RegexUtils.INT);\n        pattern = pattern.replaceAll(\"@REGISTER@\", RegexUtils.REGISTER);\n\n        return new RegExp(`^${pattern}$`).test(str);\n    }\n\n    static isInteger(str) {\n        return RegexUtils.test(RegexUtils.INT, str);\n    }\n\n    static isImmediate(str) {\n        return RegexUtils.test(RegexUtils.IMMEDIATE, str);\n    }\n\n    static isRegister(str) {\n        return RegexUtils.test(RegexUtils.REGISTER, str);\n    }\n\n    static isLabel(str) {\n        return RegexUtils.test(RegexUtils.LABEL, str);\n    }\n\n    static isJmp(str) {\n        return RegexUtils.test(RegexUtils.JMP, str);\n    }\n\n    static isJn(str) {\n        return RegexUtils.test(RegexUtils.JN, str);\n    }\n\n    static isJz(str) {\n        return RegexUtils.test(RegexUtils.JZ, str);\n    }\n\n    static isAdd(str) {\n        return RegexUtils.test(RegexUtils.ADD, str);\n    }\n\n    static isSub(str) {\n        return RegexUtils.test(RegexUtils.SUB, str);\n    }\n\n    static isCmp(str) {\n        return RegexUtils.test(RegexUtils.CMP, str);\n    }\n\n    static isMov(str) {\n        return RegexUtils.test(RegexUtils.MOV, str);\n    }\n\n}\n\nmodule.exports = RegexUtils;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\tvar threw = true;\n\ttry {\n\t\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\t\tthrew = false;\n\t} finally {\n\t\tif(threw) delete __webpack_module_cache__[moduleId];\n\t}\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\nif (typeof __webpack_require__ !== 'undefined') __webpack_require__.ab = __dirname + \"/\";","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(129);\n",""],"names":[],"sourceRoot":""}